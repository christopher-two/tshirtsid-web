/**
 * @file Firestore Security Rules for the T-Shirt ID Shop.
 *
 * Core Philosophy:
 * This ruleset prioritizes data protection and user privacy. It enforces a strict
 * separation of concerns by isolating user-specific data within the `/users/{userId}`
 * path. Public product information (T-shirts) is stored separately in the `/tshirts`
 * collection and is publicly readable.
 *
 * Data Structure:
 * - `/tshirts/{tshirtId}`: Stores publicly available t-shirt product information.
 * - `/users/{userId}/shopping_cart`: Each user has a single shopping cart document.
 * - `/users/{userId}/shopping_cart/cart_items/{cartItemId}`: Stores individual
 *   items within a user's shopping cart as a subcollection.
 *
 * Key Security Decisions:
 * - Public Read Access for T-Shirts: The `/tshirts` collection is readable by all
 *   users (including unauthenticated users) to allow browsing the product catalog.
 *   Writes (create, update, delete) are disallowed without further implementation.
 * - User-Owned Shopping Carts: Only the authenticated user can access their own
 *   shopping cart and its cart items.
 * - No User Listing: Listing all users is explicitly denied to protect user privacy.
 * - Data Denormalization: While the data model contains relationships, these are
 *   validated during write operations only when essential for integrity. No data
 *   is denormalized for rules, as it is not needed in this scenario.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read t-shirt information, but restricts modifications.
     * @path /tshirts/{tshirtId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for product catalog, restricted writes.
     */
    match /tshirts/{tshirtId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to a user's shopping cart to the owner.
     * @path /users/{userId}/shopping_cart
     * @allow (get, create, update, delete, list): if isOwner(userId)
     * @deny (get, create, update, delete, list): if !isSignedIn()
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shopping_cart {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && isValidShoppingCartCreateRequest(userId);
      allow update: if isExistingOwner(userId) && isValidShoppingCartUpdateRequest(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to cart items within a user's shopping cart to the owner.
     * @path /users/{userId}/shopping_cart/cart_items/{cartItemId}
     * @allow (get, create, update, delete, list): if isOwner(userId)
     * @deny (get, create, update, delete, list): if !isSignedIn()
     * @principle Enforces document ownership for all operations on cart items.
     */
    match /users/{userId}/shopping_cart/cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && isValidCartItemCreateRequest(userId);
      allow update: if isExistingOwner(userId) && isValidCartItemUpdateRequest(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and that the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Validates ShoppingCart create requests
     */
    function isValidShoppingCartCreateRequest(userId) {
      return request.resource.data.userId == userId
      && request.resource.data.id == userId;
    }

    /**
     * @description Validates ShoppingCart update requests
     */
    function isValidShoppingCartUpdateRequest(userId) {
      return request.resource.data.userId == userId
      && request.resource.data.id == resource.data.id;
    }

    /**
     * @description Validates CartItem create requests
     */
    function isValidCartItemCreateRequest(userId) {
      return request.resource.data.shoppingCartId == getShoppingCartIdForUser(userId);
    }

    /**
     * @description Validates CartItem update requests
     */
    function isValidCartItemUpdateRequest(userId) {
        return request.resource.data.shoppingCartId == getShoppingCartIdForUser(userId);
    }
    
    /**
     * @description Returns the shopping cart ID given a user ID.
     */
    function getShoppingCartIdForUser(userId) {
        return userId;
    }
  }
}