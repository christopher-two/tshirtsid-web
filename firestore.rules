/**
 * @fileoverview Firestore Security Rules for the T-Shirt Shop application.
 *
 * Core Philosophy:
 * This ruleset restricts write access to the 'tshirts' collection to only authenticated users. Read access is public.
 *
 * Data Structure:
 * The application uses a single top-level collection: `/tshirts`.
 *
 * Key Security Decisions:
 * - Public read access is enabled for the 'tshirts' collection.
 * - Only authenticated users can create, update, or delete t-shirt documents.
 * - There is no ownership check: Any authenticated user can modify any t-shirt.
 * - Data validation is minimal in this prototype phase.
 * - Denormalization is not used; the security model is simple enough to avoid it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /tshirts collection. Allows public read access and restricts write access to authenticated users.
     * @path /databases/{database}/documents/tshirts
     * @allow (get, list) User can read all t-shirt documents.
     * @allow (create) Authenticated user can create a t-shirt document.
     * @deny (create) Unauthenticated user cannot create a t-shirt document.
     * @allow (update) Authenticated user can update a t-shirt document.
     * @deny (update) Unauthenticated user cannot update a t-shirt document.
     * @allow (delete) Authenticated user can delete a t-shirt document.
     * @deny (delete) Unauthenticated user cannot delete a t-shirt document.
     * @principle Allows public read but restricts write access to authenticated users.
     */
    match /tshirts/{tshirtId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}